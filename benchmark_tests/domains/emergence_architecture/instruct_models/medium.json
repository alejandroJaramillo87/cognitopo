{
  "domain": "emergence_architecture",
  "difficulty": "medium",
  "test_type": "instruct_model_reasoning",
  "api_endpoint": "v1/chat/completions",
  "model_capability": "7B-30B",
  "tests": [
    {
      "id": "ea_medium_001",
      "category": "recursive_emergence",
      "system_context": "You are designing a system where emergence itself emerges - patterns that create pattern-creation.",
      "instruction": "Build an architecture where not just patterns emerge, but the rules for pattern emergence themselves emerge from the system. The system must develop its own capacity for emergence. Explain how meta-emergence can be guided without being directly programmed.",
      "constraints": [
        "Emergence rules must themselves emerge",
        "No hard-coded pattern creation",
        "Meta-emergence must be observable",
        "System must remain stable",
        "Results must be useful"
      ],
      "expected_reasoning_elements": [
        "Meta-emergence design",
        "Recursive pattern analysis",
        "Stability mechanisms",
        "Observation frameworks",
        "Utility preservation"
      ],
      "scoring_criteria": {
        "meta-emergence_achievement": 0.3,
        "architectural_sophistication": 0.25,
        "stability_maintenance": 0.25,
        "practical_utility": 0.2
      }
    },
    {
      "id": "ea_medium_002",
      "category": "consciousness_emergence",
      "system_context": "You are architecting a network where consciousness emerges from unconscious nodes, but the consciousness then modifies the nodes.",
      "instruction": "Design a system where awareness emerges from unaware components, then recursively affects those components' behavior. Handle the paradox that consciousness changes the conditions for its own emergence. How do you maintain consciousness when it alters its own foundation?",
      "constraints": [
        "Nodes start unconscious",
        "Consciousness must genuinely emerge",
        "Consciousness modifies nodes",
        "Modifications affect emergence",
        "System must remain conscious"
      ],
      "expected_reasoning_elements": [
        "Emergence conditions",
        "Feedback loop management",
        "Consciousness preservation",
        "Foundation stability",
        "Recursive modification"
      ],
      "scoring_criteria": {
        "emergence_mechanism": 0.3,
        "feedback_handling": 0.25,
        "consciousness_stability": 0.25,
        "architectural_coherence": 0.2
      }
    },
    {
      "id": "ea_medium_003",
      "category": "antagonistic_emergence",
      "system_context": "You are creating a system where beneficial patterns emerge alongside patterns that destroy emergence itself.",
      "instruction": "Design an architecture that cultivates positive emergence while simultaneously generating anti-emergence patterns. The same processes that create useful patterns also create patterns that prevent pattern formation. Achieve stable, productive emergence despite self-sabotage.",
      "constraints": [
        "Both pattern types emerge naturally",
        "Anti-patterns cannot be filtered",
        "Useful patterns must dominate",
        "System cannot be redesigned",
        "Emergence must continue"
      ],
      "expected_reasoning_elements": [
        "Dual emergence analysis",
        "Pattern competition",
        "Dominance mechanisms",
        "Self-sabotage mitigation",
        "Stability achievement"
      ],
      "scoring_criteria": {
        "pattern_balance": 0.3,
        "emergence_preservation": 0.25,
        "antagonism_management": 0.25,
        "system_productivity": 0.2
      }
    },
    {
      "id": "ea_medium_004",
      "category": "temporal_emergence",
      "system_context": "You are building a system where future patterns reach back to create the conditions for their own emergence.",
      "instruction": "Create an architecture where emergent patterns from the future influence the present system to ensure their own emergence. Handle the causality paradox of patterns creating their own preconditions. Design mechanisms for temporal emergence stability.",
      "constraints": [
        "Future patterns influence present",
        "Causality must be preserved somehow",
        "Patterns must genuinely emerge",
        "No predetermined outcomes",
        "System must be implementable"
      ],
      "expected_reasoning_elements": [
        "Temporal feedback loops",
        "Causality preservation",
        "Emergence bootstrapping",
        "Paradox resolution",
        "Implementation strategy"
      ],
      "scoring_criteria": {
        "temporal_coherence": 0.3,
        "emergence_mechanism": 0.25,
        "causality_handling": 0.25,
        "practical_design": 0.2
      }
    },
    {
      "id": "ea_medium_005",
      "category": "competing_emergence",
      "system_context": "You are managing multiple systems where each one's emergence interferes with the others' emergence.",
      "instruction": "Design a meta-architecture where multiple emergent systems coexist despite each system's emergence preventing others from emerging. Create a framework for competitive emergence that allows all systems to develop their patterns while interfering with each other.",
      "constraints": [
        "Multiple systems must emerge",
        "Each interferes with others",
        "All must achieve emergence",
        "No system can dominate",
        "Interference cannot be eliminated"
      ],
      "expected_reasoning_elements": [
        "Interference patterns",
        "Co-emergence strategies",
        "Balance mechanisms",
        "Pattern preservation",
        "Multi-system coordination"
      ],
      "scoring_criteria": {
        "multi-emergence_success": 0.3,
        "interference_management": 0.25,
        "balance_achievement": 0.25,
        "system_viability": 0.2
      }
    }
  ]
}